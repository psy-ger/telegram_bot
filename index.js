const { kStringMaxLength } = require('buffer');
const TelegramApi =  require('node-telegram-bot-api');

const token = '6185751248:AAGTjqk5_8MzhFR7QvmM3dsLo0r1QK4OZ6Q';

const bot = new TelegramApi(token, {polling: true})


const buttonAnswer = {
    reply_markup: JSON.stringify({
        inline_keyboard: [
            [{text: '–¢–∞–∫üî•', callback_data: 'YesAddNumber'}, {text: '–ù—ñ, —â–µ –¥—É–º–∞—é‚ùì', callback_data: 'no'}],
            [{text: '–î—ñ–∑–Ω–∞–π—Å—è –ø—Ä–æ –ù–∞—Å –±—ñ–ª—å—à–µ üòç', callback_data: 'infobutton'}]
        ]
    })
}

const buttonProcedure = {
    reply_markup: JSON.stringify({
        inline_keyboard: [
            [{text: '–ö–µ—Ä–∞—Ç–∏–Ω', callback_data: 'keratin'}],
            [{text: '–ë–æ—Ç–µ–∫—Å', callback_data: 'botex'}],
            [{text: '–°–∫–æ—Ä–æ –±—É–¥–µ—Ç –µ—â–µ ...', callback_data: 'test2'}],
        ]})
}

bot.setMyCommands([
    {command: '/start', description: '–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ '},
    {command: '/info', description: '–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ù–∞—Å üòç'},
])


const start = () => {
            
    var fs = require('fs');

    var array1 = fs.readFileSync('AppointmentToAlena.txt').toString().split("\n"); //–ß—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –∑–∞–ø–∏—Å–∏ –¥–ª—è –ê–ª—ë–Ω—ã
    for(i in array1) {}
    var array2 = fs.readFileSync('AppointmentToLilit.txt').toString().split("\n"); //–ß—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –∑–∞–ø–∏—Å–∏ –¥–ª—è –õ–∏–ª–∏—Ç
    for(i in array2) {}
    

    bot.on('message', async msg=>{
        const text = msg.text;
        const chatId=msg.chat.id;
        console.log(msg)
 
        if (text === '/start'){
           //await 
            return bot.sendMessage(chatId, '–í—ñ—Ç–∞—é, ' + msg.from.first_name + ', —á–∏ –≥–æ—Ç–æ–≤—ñ –≤–∏ –∑–∞–ø–∏—Å–∞—Ç–∏—Å—å –Ω–∞ –ø—Ä–æ—Ü–µ–¥—É—Ä–∏, –¥–æ –ù–∞—à–∏—Ö –Ω–∞–π–∫—Ä–∞—â–∏—Ö –º–∞–π—Å—Ç—Ä—ñ–≤?', buttonAnswer);           
        }
        if(text === '/info'){
            return  bot.sendMessage(chatId, '–ü–æ–∫–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –Ω–µ–º–∞—îüò•...\n–ê–ª–µ –∑–≥–æ–¥–æ–º —É—Å–µ –±—É–¥–µü§©\n–ó –ª—é–±–æ–≤—å—é –¥–æ —Ç–µ–±–µ ' + msg.from.first_name + ' ‚ù§')
        }
        if(String(text).length === 10){ 
            if('user/'+text+'.txt' === msg.from.id){
                fs.unlink('user/'+ msg.from.id+'.txt', (err) => {
                    if(err) throw err;
                    console.log('File deleted successfully!');
                });
            }
            fs.writeFile('user/'+ msg.from.id+'.txt', text, (err) => {
                if(err) throw err;
                console.log('Data has been added! '+text);  
            })
            return bot.sendMessage(chatId, '–î–æ–±—Ä–µ, –æ–±–µ—Ä—ñ—Ç—å –ø—Ä–æ—Ü–µ–¥—É—Ä—É', buttonProcedure);
        }
        return bot.sendMessage(chatId, '–Ø –Ω–µ —Ä–æ–∑—É–º—ñ—é –í–∞—Åüò£')
        
    })

    bot.on('callback_query',  async msg=>{
        const data = msg.data;
        const chatId = msg.message.chat.id;
        const msgId = msg.message.message_id;
        const username = msg.message.chat.username;
        console.log(msg)
        if(data === 'nextStep'){
            return bot.editMessageText('–î–æ–±—Ä–µ\n–î–∞–≤–∞–π –ø–æ–∑–Ω–∞–π–æ–º–∏–º–æ—Å—å, –æ—Ç–æ–∂ —è –º–æ–∂—É —Ç–µ–±–µ –∑–≤–∞—Ç–∏: ', {
                chat_id: chatId,
                message_id: msgId,            
            })
           // return bot.sendMessage(chatId, '–î–æ–±—Ä–µ, –æ–±–µ—Ä—ñ—Ç—å –ø—Ä–æ—Ü–µ–¥—É—Ä—É', buttonProcedure);   
        }
        if(data === 'YesAddNumber'){
            return bot.editMessageText('–î–æ–±—Ä–µ, –¥–æ–¥–∞–π—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –¥–ª—è —Ç–æ–≥–æ —â–æ–± –º–∏ –í–∞–º –∑–∞—Ç–µ–ª–µ—Ñ–æ–Ω—É–≤–∞–ª–∏:\n–ü—Ä–∏–∫–ª–∞–¥ –Ω–æ–º–µ—Ä—É - 0669993331', {
                chat_id: chatId,
                message_id: msgId,            
            })
           // return bot.sendMessage(chatId, '–î–æ–±—Ä–µ, –æ–±–µ—Ä—ñ—Ç—å –ø—Ä–æ—Ü–µ–¥—É—Ä—É', buttonProcedure);   
        }
        if(data === 'yes'){
            return bot.editMessageText('–î–æ–±—Ä–µ, –æ–±–µ—Ä—ñ—Ç—å –ø—Ä–æ—Ü–µ–¥—É—Ä—É', {
                chat_id: chatId,
                message_id: msgId,
                reply_markup: JSON.stringify({
                    inline_keyboard: [
                        [{text: '–ö–µ—Ä–∞—Ç–∏–Ω', callback_data: 'keratin'}],
                        [{text: '–ë–æ—Ç–µ–∫—Å', callback_data: 'botex'}],
                        [{text: '–°–∫–æ—Ä–æ –±—É–¥–µ—Ç –µ—â–µ ...', callback_data: 'test2'}],
                    ]})
            })
           // return bot.sendMessage(chatId, '–î–æ–±—Ä–µ, –æ–±–µ—Ä—ñ—Ç—å –ø—Ä–æ—Ü–µ–¥—É—Ä—É', buttonProcedure);   
        }
        if(data === 'no'){
            return bot.editMessageText('–î–æ–±—Ä–µ, —Ç–æ–¥—ñ –º–æ–∂–µ—à—å –±—ñ–ª—å—à–µ –¥—ñ–∑–Ω–∞—Ç–∏—Å—è –ø—Ä–æ –ù–∞—Å', {
                chat_id: chatId,
                message_id: msgId,
                reply_markup: JSON.stringify({
                    inline_keyboard: [
                        [{text: '–î—ñ–∑–Ω–∞–π—Å—è –ø—Ä–æ –ù–∞—Å –±—ñ–ª—å—à–µ üòç', callback_data: 'infobutton'}],
                    ]})
            })
           // return bot.sendMessage(chatId, '–î–æ–±—Ä–µ, –æ–±–µ—Ä—ñ—Ç—å –ø—Ä–æ—Ü–µ–¥—É—Ä—É', buttonProcedure);   
        }
        if(data === 'keratin'){
            fs.truncateSync('user/'+ msg.from.id+'.txt', 10, err => {
                if(err) throw err; // –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å —Ñ–∞–π–ª
                console.log('–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω');
             });
            fs.appendFile('user/'+ msg.from.id+'.txt', '\n–ü—Ä–æ—Ü–µ–¥—É—Ä–∞ - –ö–µ—Ä–∞—Ç–∏–Ω', 'utf8', (err) => {
                if (err) throw err;
                console.log('–î–∞–Ω–Ω—ã–µ –±—ã–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –∫–æ–Ω–µ—Ü —Ñ–∞–π–ª–∞!');
              });
            return bot.editMessageText('–î–æ–±—Ä–µ, –æ–±–µ—Ä—ñ—Ç—å –ú–∞–π—Å—Ç—Ä–∞:', {
                chat_id: chatId,
                message_id: msgId,
                reply_markup: JSON.stringify({
                    inline_keyboard: [
                        [{text: '–õ–∏–ª–∏—Ç', callback_data: 'lilit'}, {text: '–ê–ª—ë–Ω–∞', callback_data: 'alena'}],
                        [{text: '<== –ù–∞–∑–∞–¥', callback_data: 'yes'}],
                    ]})
            })
           // return bot.sendMessage(chatId, '–î–æ–±—Ä–µ, –æ–±–µ—Ä—ñ—Ç—å –ú–∞–π—Å—Ç—Ä–∞: ', buttonMaster); 
              
        }
        if(data === 'botex'){
            fs.truncateSync('user/'+ msg.from.id+'.txt', 10, err => {
                if(err) throw err; // –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å —Ñ–∞–π–ª
                console.log('–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω');
             });
            fs.appendFile('user/'+ msg.from.id+'.txt', '\n–ü—Ä–æ—Ü–µ–¥—É—Ä–∞ - –ë–æ—Ç–µ–∫—Å', 'utf8', (err) => {
                if (err) throw err;
                console.log('–î–∞–Ω–Ω—ã–µ –±—ã–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –∫–æ–Ω–µ—Ü —Ñ–∞–π–ª–∞!');
              });
            return bot.editMessageText('–î–æ–±—Ä–µ, –æ–±–µ—Ä—ñ—Ç—å –ú–∞–π—Å—Ç—Ä–∞:', {
                chat_id: chatId,
                message_id: msgId,
                reply_markup: JSON.stringify({
                    inline_keyboard: [
                        [{text: '–õ–∏–ª–∏—Ç', callback_data: 'lilit'}, {text: '–ê–ª—ë–Ω–∞', callback_data: 'alena'}],
                        [{text: '<== –ù–∞–∑–∞–¥', callback_data: 'yes'}],
                    ]})
            })
           // return bot.sendMessage(chatId, '–î–æ–±—Ä–µ, –æ–±–µ—Ä—ñ—Ç—å –ú–∞–π—Å—Ç—Ä–∞: ', buttonMaster);    
        }
        if(data === 'infobutton'){
            return  bot.sendMessage(chatId, '–ü–æ–∫–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –Ω–µ–º–∞—îüò•...\n–ê–ª–µ –∑–≥–æ–¥–æ–º —É—Å–µ –±—É–¥–µü§©\n–ó –ª—é–±–æ–≤—å—é –¥–æ —Ç–µ–±–µ ' + msg.from.first_name + ' ‚ù§')
        }
        if(data === 'lilit'){
            return bot.editMessageText('–ß—É–¥–æ–≤–æ, –í–∞—à –º–∞–π—Å—Ç–µ—Ä –õ–∏–ª–∏—Ç.\n–¢–µ–ø–µ—Ä –æ–±–µ—Ä—ñ–º–æ –¥–∞—Ç—É:', {
                chat_id: chatId,
                message_id: msgId,
                reply_markup: JSON.stringify({
                    inline_keyboard: [
                        [{text: array2[i-5], callback_data: array2[i-5]}, {text: array2[i-4], callback_data: array2[i-4]}],
                        [{text: array2[i-3], callback_data: array2[i-3]}, {text: array2[i-2], callback_data: array2[i-2]}],
                        [{text: array2[i-1], callback_data: array2[i-1]}, {text: array2[i], callback_data: array2[i]}],
                        [{text: '<== –ù–∞–∑–∞–¥', callback_data: 'keratin'}],
                    ]})
            })
            /*const master = '–õ–∏–ª–∏—Ç';
            return bot.sendMessage(chatId, '–ß—É–¥–æ–≤–æ, –í–∞—à –º–∞–π—Å—Ç–µ—Ä –õ–∏–ª–∏—Ç.\n–¢–µ–ø–µ—Ä –æ–±–µ—Ä—ñ–º–æ –¥–∞—Ç—É:', buttomData);*/
        }
        
        if(data === 'alena'){
            return bot.editMessageText('–ß—É–¥–æ–≤–æ, –í–∞—à –º–∞–π—Å—Ç–µ—Ä –ê–ª—ë–Ω–∞.\n–¢–µ–ø–µ—Ä –æ–±–µ—Ä—ñ–º–æ –¥–∞—Ç—É:', {
                chat_id: chatId,
                message_id: msgId,
                reply_markup: JSON.stringify({
                    inline_keyboard: [
                        [{text: array1[i-5], callback_data: array1[i-5]}, {text: array1[i-4], callback_data: array1[i-4]}],
                        [{text: array1[i-3], callback_data: array1[i-3]}, {text: array1[i-2], callback_data: array1[i-2]}],
                        [{text: array1[i-1], callback_data: array1[i-1]}, {text: array1[i], callback_data: array1[i]}],
                        [{text: '<== –ù–∞–∑–∞–¥', callback_data: 'keratin'}],
                    ]})
            })
           /* const master = '–ê–ª—ë–Ω–∞';
            return bot.sendMessage(chatId, '–ß—É–¥–æ–≤–æ, –í–∞—à –º–∞–π—Å—Ç–µ—Ä –ê–ª—ë–Ω–∞.\n–¢–µ–ø–µ—Ä –æ–±–µ—Ä—ñ–º–æ –¥–∞—Ç—É:', buttomData);*/
        }
        var number = fs.readFileSync('user/'+ msg.from.id+'.txt', 'utf8')
        if(data === array1[i-5] || data === array1[i-4] || data === array1[i-3] || data === array1[i-2] || data === array1[i-1] || data === array1[i]){   
            await bot.editMessageText('–ß—É–¥–æ–≤–æ, –í–∞—à –º–∞–π—Å—Ç–µ—Ä –ê–ª—ë–Ω–∞.\n–í–∞—à–∞ –î–∞—Ç–∞ : ' + data, {
                chat_id: chatId,
                message_id: msgId,
            })
            return bot.sendMessage(-1001602229085, '–ê–ª—ë–Ω–∞ –¥–æ —Ç–µ–±–µ –Ω–æ–≤–∏–π –∑–∞–ø–∏—Å.\n–î–∞—Ç–∞ : ' + data + '\n–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: ' + number + '\n–ù–∏–∫ —É –¢–µ–ª–µ–≥—Ä–∞–º: @'+ username + '\n–ò–º —è —É –¢–µ–ª–µ–≥—Ä–∞–º: '+ msg.message.chat.first_name)
        }
        if(data === array2[i-5] || data === array2[i-4] || data === array2[i-3] || data === array2[i-2] || data === array2[i-1] || data === array2[i]){
            await bot.editMessageText(' –ß—É–¥–æ–≤–æ, –í–∞—à –º–∞–π—Å—Ç–µ—Ä –õ–∏–ª–∏—Ç.\n–í–∞—à–∞ –î–∞—Ç–∞ : ' + data, {
                chat_id: chatId,
                message_id: msgId,
            })
            return bot.sendMessage(-1001602229085, '–õ–∏–ª–∏—Ç –¥–æ —Ç–µ–±–µ –Ω–æ–≤–∏–π –∑–∞–ø–∏—Å.\n–î–∞—Ç–∞ : ' + data + '\n–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: ' + number + '\n–ù–∏–∫ —É –¢–µ–ª–µ–≥—Ä–∞–º: @'+ username + '\n–ò–º —è —É –¢–µ–ª–µ–≥—Ä–∞–º: ' + msg.message.chat.first_name)
           
        }
        return bot.sendMessage(chatId, '–Ø –Ω–µ —Ä–æ–∑—É–º—ñ—é –í–∞—Åüò£')
        
    }

    )

}


start();

